---
###############################################################
#                   Authelia configuration                    #
###############################################################

server:
  address: 'tcp://:9091'

theme: 'dark'

log:
  level: 'debug'
  format: json
  file_path: "/var/log/authelia/authelia.log"
  keep_stdout: true

totp: # Time-based One-Time Password
  issuer: '{{ env "DOMAIN" }}' # Might need to be authelia.com
  period: 30
  digits: 6
  algorithm: 'sha1'
  skew: 1

authentication_backend:
  file:
    path: '/config/users_database.yml'
    password:
      algorithm: 'argon2id'
      iterations: 3
      key_length: 32
      salt_length: 16
      parallelism: 4
      memory: 256

password_policy:
  # The standard policy allows you to tune individual settings manually.
  standard:
    enabled: false # TODO: Choose ONE policy to enable, not both.
    min_length: 8
    max_length: 0
    require_uppercase: true
    require_lowercase: true
    require_number: true
    require_special: true
  # zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
  zxcvbn:
    enabled: false # TODO: Choose ONE policy to enable, not both.
    min_score: 3

access_control:
  default_policy: 'deny'
  rules:
    # bypass rule
    - domain:
      - 'auth.{{ env "DOMAIN" }}'
      policy: 'bypass'
    # two factor login - catch all
    - domain:
      - '{{ env "DOMAIN" }}'
      - '*.{{ env "DOMAIN" }}'
      policy: 'two_factor'

session:
  name: 'authelia_session'
  expiration: '1h'
  inactivity: '5m'
  remember_me: '1M'
  cookies:
    - domain: '{{ env "DOMAIN" }}'
      authelia_url: 'https://auth.{{ env "DOMAIN" }}'
      same_site: 'lax'

regulation:
  max_retries: 3
  find_time: '2m'
  ban_time: '30m'

storage:
  local:
    path: '/config/db.sqlite3'

notifier:
  smtp:
    address: 'smtp://{{ env "EMAIL_SERVER" }}:{{ env "EMAIL_SERVER_PORT" }}'
    username: '{{ env "EMAIL_SERVER_USER" }}'
    password: '{{ env "EMAIL_SERVER_PASSWORD" }}'
    sender: 'Authelia <{{ env "EMAIL_FROM" }}>'
    identifier: '{{ env "DOMAIN" }}'
    subject: "[Authelia] {title}"

###############################################################
#                OpenID Connect Configuration                 #
###############################################################
# Example Client Credentials using OIDC
#
# To enable OIDC:
# 1. Uncomment the entire identity_providers section below
# 2. Remove the '#' from the line starting with "- key:"
# 3. Uncomment OIDC environment variables in the docker-compose.yml file.
# 4. Ensure your OIDC JWKS key file exists at "/config/secrets/oidc.jwks.key"
#
# identity_providers:
#   oidc:
#     jwks:
# # Remove this â†“ to enable template syntax for the key. Disabled to stop Authelia template parser from crashing when this section is commented out.
#       - key: {#{ secret "/config/secrets/oidc.jwks.key" | mindent 10 "|" | msquote }}
#     cors:
#       endpoints:
#         - 'token'
#         - 'userinfo'
#       allowed_origins:
#         - 'https://n8n.{{ env "DOMAIN" }}'
#     clients:
#       - client_id: '{{ env "N8N_CLIENT_ID" }}'  # Random 100-character alphanumeric string. See: https://www.authelia.com/configuration/identity-providers/openid-connect/clients/#client_id
#         client_name: 'n8n'
#         client_secret: '{{ env "N8N_CLIENT_SECRET_HASH" }}'  # Hashed client secret. See: https://www.authelia.com/integration/openid-connect/frequently-asked-questions/#how-do-i-generate-a-client-identifier-or-client-secret
#         redirect_uris:
#           - 'https://n8n.{{ env "DOMAIN" }}/webhook'  # client_credentials doesn't use any redirects, but this is an Authelia required field, thus the placeholder.
#         audience:
#           - 'n8n.{{ env "DOMAIN" }}'
#         scopes:
#           - 'api'
#         grant_types:
#           - 'client_credentials'
#         requested_audience_mode: 'implicit'  # Automatically includes permitted audiences in the token
#         access_token_signed_response_alg: 'RS256'
